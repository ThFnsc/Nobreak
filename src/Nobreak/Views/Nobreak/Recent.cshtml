@model List<Nobreak.Context.Entities.NobreakState>

@{
    ViewData["Title"] = "Nobreak";
    ViewData["Layout"] = "_Layout";
}

<a href="/api/v1/allvalues" class="btn btn-block btn-warning">Baixar todas as leituras</a>

<table class="mx-auto table table-hover table-striped" id="values-table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(m => m[0].Timestamp)</th>
            <th>@Html.DisplayNameFor(m => m[0].VoltageIn)</th>
            <th>@Html.DisplayNameFor(m => m[0].VoltageOut)</th>
            <th>@Html.DisplayNameFor(m => m[0].LoadPercentage)</th>
            <th>@Html.DisplayNameFor(m => m[0].FrequencyHz)</th>
            <th>@Html.DisplayNameFor(m => m[0].BatteryVoltage)</th>
            <th>@Html.DisplayNameFor(m => m[0].BatteryPercentage)</th>
            <th>@Html.DisplayNameFor(m => m[0].TemperatureC)</th>
            <th>@Html.DisplayNameFor(m => m[0].PowerState)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td colspan="9">
                <div class="alert alert-info">Carregando...</div>
            </td>
        </tr>
    </tbody>
</table>

@section scripts {
    <script>
        const elements = {
            valuesTable: document.getElementById("values-table"),
        }

        function displayData(data) {
            elements.valuesTable.children[1].innerHTML = data.map(v => [formatDate(v.Timestamp), v.VoltageIn + "v", v.VoltageOut + "v", v.LoadPercentage + "%", v.FrequencyHz + "Hz", v.BatteryVoltage + "v", v.BatteryPercentage + "%", v.TemperatureC + "ªC", capitalizeFirstLetters(v.PowerState)].map(v => `<td>${v}</td>`).join("")).map(v => `<tr>${v}</tr>`).join("");
        }

        function reloadValues() {
            fetch("/api/v1/recentvalues")
                .then(r => r.json())
                .then(displayData);
        }

        reloadValues();
        setInterval(() => reloadValues(), 2000);
    </script>
}