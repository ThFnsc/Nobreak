@page "/Recent"

@inject INobreakProvider _nobreak
@inject IMapper _mapper
@inject IDistributedCache _cache
@inject NavigationManager _navManager
@inject IOptions<AppSettings> _appSettings

<div class="w-100 mb-2 text-center">
    <ReCAPTCHA OnAuthorized="DownloadValues" AllowIgnoreIfNotReady="true">
        <Content Context="action">
            <button @onclick="action.Submit" class="btn btn-warning">
                Baixar todo o histórico
                @if (action.Success is not null)
                {
                    if (action.Success.Value)
                    {
                        <span class="oi oi-check"></span>
                    }
                    else
                    {
                        <span class="oi oi-circle-x"></span>
                    }
                }
                else if (action.Processing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
            </button>
        </Content>
    </ReCAPTCHA>
</div>

<Table Source="_states">
    <Head>
        <th><Name T="NobreakStateViewModel" For="s=>s.Timestamp"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.PowerState"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.VoltageIn"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.VoltageOut"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.LoadPercentage"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.FrequencyHz"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.BatteryVoltage"></Name></th>
        <th><Name T="NobreakStateViewModel" For="s=>s.TemperatureC"></Name></th>
    </Head>
    <Body Context="state">
        <td>@(state.Timestamp.Format()) (há @state.TimeAgo.Format())</td>
        <td>@(state.PowerState.GetDisplayName())</td>
        <td>@(state.VoltageIn)v</td>
        <td>@(state.VoltageOut)v</td>
        <td>@(state.LoadPercentage)%</td>
        <td>@(state.FrequencyHz)hz</td>
        <td>@(state.BatteryVoltage)v (@(state.BatteryPercentage)%)</td>
        <td>@(state.TemperatureC)ºC</td>
    </Body>
</Table>
<Timer Elapsed="Reload" Enabled="true" Interval="TimeSpan.FromSeconds(1)"></Timer>

@code {
    private List<NobreakStateViewModel> _states;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private async Task Reload()
    {
        var recentValues = await _nobreak.GetRecentValuesAsync();
        _states = _mapper.Map<List<NobreakStateViewModel>>(recentValues);
        await InvokeAsync(StateHasChanged);
    }

    protected override Task OnInitializedAsync() =>
        Reload();

    private async Task DownloadValues()
    {
        if (_appSettings.Value.RequireLoginToDownloadValues && !(await authenticationStateTask).User.Identity.IsAuthenticated)
        {
            Modal.Show<Login>("Login", new ModalOptions
            {
                Animation = ModalAnimation.FadeInOut(.3)
            });
            return;
        }
        var guid = RandomNumberGeneratorExtensions.RandomBase64Url();
        await _cache.SetStringAsync(guid, guid, new DistributedCacheEntryOptions
        {
            AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(10)
        });
        _navManager.NavigateTo($"/DownloadValues", true, new
        {
            Token = guid
        });
    }
}
